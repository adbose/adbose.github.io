
   <rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
     <channel>
       <title>hugo on Aditya Bose</title>
       <link>https://adbose.github.io/tags/hugo/</link>
       <description>Recent content in hugo on Aditya Bose</description>
       <generator>Hugo -- gohugo.io</generator>
       <copyright>Copyright &amp;copy; 2020 - Aditya Bose</copyright>
       <lastBuildDate>Fri, 19 Jun 2020 11:39:54 +0530</lastBuildDate>
       
           <atom:link href="https://adbose.github.io/tags/hugo/index.xml" rel="self" type="application/rss+xml" />
       
       
       <item>
         <title>Blogging With Hugo</title>
         <link>https://adbose.github.io/posts/06/</link>
         <pubDate>Fri, 19 Jun 2020 11:39:54 +0530</pubDate>
         
         <guid>https://adbose.github.io/posts/06/</guid>
         <description>&lt;p&gt;This blog is hosted for free on &lt;a href=&#34;https://pages.github.com/&#34;&gt;Github Pages&lt;/a&gt;. But it is built using another service called Hugo. If you look at the site footer, you should find a link to their project website.&lt;/p&gt;
&lt;p&gt;In their website, they say they are the world&amp;rsquo;s fastest framework for building websites. It is a static site generator written in Go with extremely fast build times (~1 ms per page). Content is written in markdown with front matter. Hugo then takes the source directory with content and templates and renders them into a full html website.&lt;/p&gt;
&lt;p&gt;Below is a quick start introduction to Hugo to get your own blog up and running in less than 30 minutes.&lt;/p&gt;
&lt;p&gt;The first thing that you need to do is install Hugo on your machine.&lt;/p&gt;
&lt;p&gt;If you are on a Linux or Mac, you can use &lt;a href=&#34;https://brew.sh/&#34;&gt;Brew&lt;/a&gt; to install Hugo. For more options, see the official install docs &lt;a href=&#34;https://gohugo.io/getting-started/installing&#34;&gt;here&lt;/a&gt;. It&amp;rsquo;s also recommended to have &lt;a href=&#34;../05&#34;&gt;Git&lt;/a&gt; installed as well because it will make content management so much easier just like software version control.&lt;/p&gt;
&lt;p&gt;To create a new site, simple run the command below:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hugo new site mysite
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will create a new Hugo site in a folder named &lt;em&gt;mysite&lt;/em&gt;. Navigate into the directory, and initialise a git repository inside it.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd mysite
git init
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now, you can add a theme to your site. I chose the &lt;em&gt;Kiera&lt;/em&gt; theme for my blog. You can choose any theme that suits your purpose from their collection of hundreds of themes &lt;a href=&#34;https://themes.gohugo.io/&#34;&gt;here&lt;/a&gt;. It&amp;rsquo;s recommended to download the theme into your site by using git submodule like below:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git submodule add https://github.com/funkydan2/hugo-kiera.git themes/hugo-kiera
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;A new &lt;em&gt;.gitmodules&lt;/em&gt; file will be created containing the local path and remote URL of the submodule.&lt;/p&gt;
&lt;p&gt;Then, add the theme to the site configuration:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;echo &#39;theme = &amp;quot;ananke&amp;quot;&#39; &amp;gt;&amp;gt; config.toml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now you can start creating content by using the hugo new command from the site root like so:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hugo new posts/my-first-post.md
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will create a post by the name &lt;em&gt;my-first-post&lt;/em&gt; in a &lt;em&gt;posts&lt;/em&gt; sub-directory inside the &lt;em&gt;content&lt;/em&gt; directory of the site.&lt;/p&gt;
&lt;p&gt;Open the file in a text editor of your choice and start writing. Each new content file starts with some extra information about the post called front matter like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;+++
title = &amp;quot;My First Post&amp;quot;
date: 2019-03-26T08:47:11+01:00
draft: true
tags = []
categories = []
+++
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can start writing directly the contents below the front matter in markdown format as usual.&lt;/p&gt;
&lt;p&gt;Once written, set the value of &lt;em&gt;drafts&lt;/em&gt; in your file&amp;rsquo;s front matter to &lt;code&gt;false&lt;/code&gt;, and launch a development server using the command&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hugo server
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;By default, this command will not deploy the files which have &lt;em&gt;drafts&lt;/em&gt; as &lt;code&gt;true&lt;/code&gt;. (&lt;a href=&#34;https://gohugo.io/getting-started/usage/#draft-future-and-expired-content&#34;&gt;Read More&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;To deploy draft files, use the command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hugo server -D
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Once, you are satisfied with your changes, stop the server, and build your site by simply using the command:
&lt;code&gt;hugo&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;To build the drafts too, use the command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hugo -D
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Output will be in  the &lt;strong&gt;/public/&lt;/strong&gt; directory by default. You can change it by setting &lt;code&gt;publishDir&lt;/code&gt; to a directory name of your choice in the &lt;em&gt;config&lt;/em&gt; file. You may then deploy your site by copying the &lt;strong&gt;public/&lt;/strong&gt; directory to your production web server.&lt;/p&gt;
&lt;p&gt;Now, to deploy this site using Github pages, simply create a repository of the name &lt;code&gt;username.github.io&lt;/code&gt; where &lt;em&gt;username&lt;/em&gt; is your Github account ID. It&amp;rsquo;s necessary to create the repo of that name because Github gives you a free website using your uniquie ID on the &lt;strong&gt;github.io&lt;/strong&gt; domain.&lt;/p&gt;
&lt;p&gt;Clone the repository on your computer and add the contents of your site&amp;rsquo;s public directory into this new repo. Finally, commit and push. Your site should be live in a few minutes on your unique &lt;em&gt;github.io&lt;/em&gt; domain.&lt;/p&gt;
&lt;p&gt;Before committing and pushing your &lt;strong&gt;mysite&lt;/strong&gt; repo to Github, first delete your public directory and add your &lt;em&gt;username.github.io&lt;/em&gt; repo as a submodule with the directory name &lt;strong&gt;public&lt;/strong&gt; like so:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rm -r public/
git submodule add &amp;lt;Remote location of your username.github.io repo&amp;gt; public/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now, every time you add new content to the site and build it, your &lt;em&gt;public&lt;/em&gt; directory will be updated. You can navigate inside the public directory and update your &lt;strong&gt;username.github.io&lt;/strong&gt; remote repository.&lt;/p&gt;
&lt;p&gt;Once updated, navigate back to the &lt;strong&gt;mysite&lt;/strong&gt; root, and update its remote repository without pushing the contents of your theme or public directory. Instead, only a refernce to specific commits are added.
(&lt;a href=&#34;https://github.com/adbose/personal-website&#34;&gt;See example&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s pretty much it. You should have a workflow set up to publish and maintain a static site or blog powered by Hugo. You can do some customizations based on your need. For example, I made a custom static home page for my blog instead of using the default list page view of the hugo site by adding a new post called &lt;strong&gt;_index.md&lt;/strong&gt;, and display a list page for posts by adding a &lt;strong&gt;posts.md&lt;/strong&gt; file in the &lt;em&gt;archetypes&lt;/em&gt; directory.&lt;/p&gt;
&lt;p&gt;Check out the official &lt;a href=&#34;https://gohugo.io/documentation/&#34;&gt;docs&lt;/a&gt; for more details.&lt;/p&gt;
</description>
       </item>
       
     </channel>
   </rss>


   <rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
     <channel>
       <title>python on Aditya Bose</title>
       <link>https://adbose.github.io/tags/python/</link>
       <description>Recent content in python on Aditya Bose</description>
       <generator>Hugo -- gohugo.io</generator>
       <copyright>Copyright &amp;copy; 2020 - Aditya Bose</copyright>
       <lastBuildDate>Sat, 16 May 2020 13:56:48 +0530</lastBuildDate>
       
           <atom:link href="https://adbose.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
       
       
       <item>
         <title>A Covid-19 Tweeter</title>
         <link>https://adbose.github.io/posts/04/</link>
         <pubDate>Sat, 16 May 2020 13:56:48 +0530</pubDate>
         
         <guid>https://adbose.github.io/posts/04/</guid>
         <description>&lt;p&gt;So I finally got developer account access from Twitter to post automated coronavirus updates which I had applied for last &lt;a href=&#34;../01&#34;&gt;month&lt;/a&gt;.
In this part, we will look at the process of creating an app, and developing the code to post tweets programmatically.&lt;/p&gt;
&lt;p&gt;We are going to use Python3 as our programming language and the &lt;code&gt;tweepy&lt;/code&gt; python library to access Twiiter&amp;rsquo;s APIs, along with &lt;code&gt;lxml&lt;/code&gt; to parse the Worldometers site for data. We need to install these dependencies in a new python virtual environment, and activate it to start developing.&lt;/p&gt;
&lt;p&gt;First, we go to the &lt;a href=&#34;https://developer.twitter.com/en/apps&#34;&gt;apps page&lt;/a&gt; and create an app. We give an app name, add a description and a website url. dd description and a website url. At the bottom, we need to describe briefly how we are going to use the app, and press create.&lt;/p&gt;
&lt;p&gt;Once created, go to the &lt;em&gt;Keys and Tokens&lt;/em&gt; tab, and generate Access Token and Access Token Secret, and copy them along with the consumer API keys in a python file called &lt;em&gt;config.py&lt;/em&gt; as below:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CONSUMER_KEY = &#39;&amp;lt;API key&amp;gt;&#39;
CONSUMER_SECRET = &#39;&amp;lt;API secret key&amp;gt;&#39;
ACCESS_TOKEN = &#39;&amp;lt;Access token&amp;gt;&#39;
ACCESS_TOKEN_SECRET = &#39;&amp;lt;Access token secret&amp;gt;&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In the same folder as &lt;em&gt;config.py&lt;/em&gt;, create another python file called &lt;em&gt;app.py&lt;/em&gt; and import the tweepy module, the keys from config and authenticate the app as below:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;auth = tweepy.OAuthHandler(CONSUMER_KEY, CONSUMER_SECRET)
auth.set_access_token(ACCESS_TOKEN, ACCESS_TOKEN_SECRET)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then, create an API object and verify the access credentials as below:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;api = tweepy.API(auth)
api.verify_credentials()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We are now ready to compose our tweet and post it to Twitter.&lt;/p&gt;
&lt;p&gt;We use the &lt;code&gt;requests&lt;/code&gt; library to fetch the data for our tweet from Worldometers, parse it using &lt;code&gt;xpath&lt;/code&gt; and save it in a variable called &lt;em&gt;tweet&lt;/em&gt;. We can then post our tweet using a single line of code as below:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;api.update_status(tweet)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To post the tweet, simply run the &lt;em&gt;app.py&lt;/em&gt; from the console with the command&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ python app.py
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We now have a basic Twitter bot ready, and can post tweets whenever we run our script. Feel free to checkout the code on &lt;a href=&#34;https://github.com/adbose/covid-tweeter&#34;&gt;Github&lt;/a&gt; and send PRs to improve this bot.&lt;/p&gt;
&lt;p&gt;Also, follow the bot &lt;a href=&#34;https://twitter.com/covidtrackerbot&#34;&gt;@covidtrackerbot&lt;/a&gt; on Twitter, and press the bell icon to get notified whenever there is a new tweet.&lt;/p&gt;
&lt;p&gt;Our next steps would be to host it online and add more functionality like tweeting periodically from an infinite loop, or tweeting country-wise stats as they are updated on Worldometer.&lt;/p&gt;
&lt;p&gt;Stay tuned for updates!&lt;/p&gt;
</description>
       </item>
       
       <item>
         <title>Twilio Hackathon 2020</title>
         <link>https://adbose.github.io/posts/03/</link>
         <pubDate>Sat, 09 May 2020 20:47:09 +0530</pubDate>
         
         <guid>https://adbose.github.io/posts/03/</guid>
         <description>&lt;p&gt;Over the past month, I have been hacking around with the Twilio API for WhatsApp to create some simple bots by following their documentation and tutorials.&lt;/p&gt;
&lt;p&gt;Twilio was hosting a hackathon throughout April on &lt;a href=&#34;https://dev.to/devteam/announcing-the-twilio-hackathon-on-dev-2lh8&#34;&gt;Dev&lt;/a&gt; to solve challenges in communication, and one of the themes was the ongoing Coronavirus pandemic.
This seemed like a good opportunity to test out my ideas for a Covid Tracker as a WhatsApp bot.&lt;/p&gt;
&lt;p&gt;We have already seen how we can import twilio to a python script to use it&amp;rsquo;s APIs to send messages to users.&lt;/p&gt;
&lt;p&gt;In this project, we would create a Flask app and use Twilio&amp;rsquo;s &lt;code&gt;twiml&lt;/code&gt; APIs to send meaningful information based on user queries.&lt;/p&gt;
&lt;p&gt;Our original intent from the &lt;a href=&#34;../01&#34;&gt;first&lt;/a&gt; post was to be able to get notified on the latest Covid-19 case stats. The easy solution that I wanted to implement was a Twitter bot that tweets every time it receives updated stats from it&amp;rsquo;s trusted data sources. Since I have yet not recevied **Developer access for Twitter, I deceided to implement an information system related to Covid-19 over WhatsApp. It is not free to send self initiated messages, and to be able to send such messages, one needs to apply for a Business Account with WhatsApp which again goes through an approval process which again takes several weeks. We are gonna worry about all that later, and start building and testing right away using the Twilio Sandbox for WhatsApp.&lt;/p&gt;
&lt;p&gt;My main objective for the Hackathon was to show daily and total Covid-19 cases in India. Using the location services of WhatsApp, we could also get nearby case statistics andn essential services information for users to have an idea of the neighbourhood they are in.&lt;/p&gt;
&lt;p&gt;The project is developed using Python3.8 with the Flask web microframework, and uses Twilio&amp;rsquo;s Programmable SMS API for WhatsApp. Let us start by first installing &lt;code&gt;flask&lt;/code&gt; and &lt;code&gt;twilio&lt;/code&gt; in a new virtual environment, after which we can start developing by importing these dependencies in our code.&lt;/p&gt;
&lt;p&gt;The next step is to source the data. For country level and total global Covid-19 stats, Worldometers is probably the most popular site on the Internet. They have paid licences starting $35/month to access their data APIs, but I didn&amp;rsquo;t wish to pay any money to get started with the project which is mainly an experimental one for educational purposes. So, using an open source MIT licence for fair and non-commercial use, I assumed I could safely scrape the publicly available data from their site and get all the country level stats at a given moment.&lt;/p&gt;
&lt;p&gt;Given below is a script that we could write to fetch the current stats from Worldometers on the global cases, deaths and recoveries:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    response = requests.get(&#39;https://www.worldometers.info/coronavirus/&#39;)
    doc = html.fromstring(response.content)
    country_names = doc.xpath(
            &#39;//table[@id=&amp;quot;main_table_countries_today&amp;quot;]/tbody/tr/td[2]/a[contains(@href, &amp;quot;country/&amp;quot;)]/text()&#39;)
            print(country_names)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The result will be a list of names of countries as they are written in the Worldometers site in the main stats table.
To scrape the website more reliably, I decided to use the &lt;code&gt;lxml&lt;/code&gt; Python package to parse the site XML using &lt;code&gt;xpath&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Luckily, getting India specific data is easier. The site &lt;a href=&#34;covid19india.org&#34;&gt;covid19india.org&lt;/a&gt; provides a free and open JSON API which we can access using simple HTTP GET requests to get state level, district level, patient level, and overall stats. The data is crowdsourced and maintained by the volunteers involved with the project. Check out the API information page &lt;a href=&#34;https://api.covid19india.org/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We use the &lt;code&gt;requests&lt;/code&gt; Python package and Python&amp;rsquo;s inbuild &lt;code&gt;json&lt;/code&gt; module to send a request to an API and get response in a Python data type which will be the JSON equivalent of the data like a &lt;em&gt;dict&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;A typical request and response code would look something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    response = requests.get(api_url)
    return response.json()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;When users send their location in their message, we obtain the location coordinates from the &lt;code&gt;request.values&lt;/code&gt; object of the request payload that WhatsApp receives. To encode and decode locations and places, we can use a third party geolocation service like Google Maps API. For the purposes of the hackathon, I used the free and public &lt;a href=&#34;https://nominatim.org/&#34;&gt;Nominatim Open Street Map API&lt;/a&gt; from the &lt;code&gt;geopy&lt;/code&gt; Python package.
Using the location data, we were able to provide case stats by district, zone information, as well as essential services available nearby.&lt;/p&gt;
&lt;h3 id=&#34;using-the-bot&#34;&gt;Using The Bot&lt;/h3&gt;
&lt;p&gt;The app is hosted for free on &lt;a href=&#34;https://heroku.com&#34;&gt;Heroku&lt;/a&gt;. You can start interacting with the bot right now by sending the message &lt;code&gt;join came-told&lt;/code&gt; to Twilio&amp;rsquo;s shared WhatsApp number.&lt;/p&gt;
&lt;p&gt;You can find the code for the project on &lt;a href=&#34;https://github.com/adbose/covid-india-whatsapp-tracker&#34;&gt;Github&lt;/a&gt; along with the instructions to clone and run it locally with the Twilio Sandbox for WhatsApp using &lt;code&gt;ngrok&lt;/code&gt; to expose the local instance of your app to Twilio&amp;rsquo;s webhook endpoint URL.
You can also read my submission post on &lt;a href=&#34;https://dev.to/adbose/twilio-hackathon-submission-a-location-based-covid-19-whatsapp-tracker-for-india-1oi3&#34;&gt;dev.to&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Stay tuned for more updates on this project!&lt;/p&gt;
</description>
       </item>
       
       <item>
         <title>WhatsApp</title>
         <link>https://adbose.github.io/posts/02/</link>
         <pubDate>Fri, 17 Apr 2020 02:29:14 +0530</pubDate>
         
         <guid>https://adbose.github.io/posts/02/</guid>
         <description>&lt;p&gt;Last week, I decided to build a Twitter bot to tweet out the latest Covid-19 cases and news tracked by &lt;a href=&#34;https://www.worldometers.info/coronavirus/&#34;&gt;Worldometers&lt;/a&gt; and &lt;a href=&#34;https://www.covid19india.org&#34;&gt;India Covid-19 Tracker&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;While waiting for my developer account request to get approved by Twitter (which is taking rather longer than usual), I started looking into some other platforms where I could start developing right away.&lt;/p&gt;
&lt;p&gt;One such platform is WhatsApp, which for being the most popular messaging application in the world, is rapidly gaining interest among businesses to connect with their customers using the WhatsApp Business API.
Usually, WhatsApp takes several weeks for approving a WhatsApp Business account if applied directly. But with one of it&amp;rsquo;s official service providers like Twilio, it could take only about a couple of weeks.&lt;/p&gt;
&lt;p&gt;Let us explore the Twilio API for WhatsApp to start interacting with WhatsApp programmatically.&lt;/p&gt;
&lt;p&gt;The first step is to create a free Twilio account. All new users get a $15 bonus trial credit on signup to test out their platform.
To start using the Twilio API for WhatsApp in production, we will need to purchase a number from Twilio and apply for a WhatsApp Business profile.
We are going to skip this step for now and directly start developing our application, and test it out using the Sandbox in the console.&lt;/p&gt;
&lt;p&gt;I will be using Python3 on my local development machine running Linux.&lt;/p&gt;
&lt;p&gt;First, we need to copy the Accound SID and Auth Token from the Twilio console, and use them to set our environment variables that will allow our Python script to access our Twilio account and use the API.&lt;/p&gt;
&lt;p&gt;From the terminal, run the export command to set our environment variables named &lt;code&gt;TWILIO_ACCOUNT_SID&lt;/code&gt; and &lt;code&gt;TWILIO_AUTH_TOKEN&lt;/code&gt;, as shown below:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;export TWILIO_ACCOUNT_SID=&#39;&amp;lt;your twilio account sid&amp;gt;&#39; 
# paste in your Account SID between single quotes

export TWILIO_AUTH_TOKEN=&#39;&amp;lt;your twilio authentication token&amp;gt;&#39;
# paste in your Auth Token between single quotes
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;With our environment variables now set, we are ready to write our Python script and test it out. But first, we are going to create a new directory for our project. We are going to call it &lt;code&gt;whatsapp-test-bot&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;From the terminal, run the command below to create our directory:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir whatsapp-test-bot
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Next, we are going to create a new virtual environment to keep our dependencies isolated from other projects.
Navigate to our newly created directory, and create a new virtual environment using the command below:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;python3 -m venv whatsapp_test_env
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;or, if you have the virtualenv python package installed, run&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;virtualenv whatsapp_test_env
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;After creating the virtual environment, activate it using the command below:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;source ./whatsapp_test_env/bin/activate
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then, install the Twilio Python helper library into the virtual environment:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pip install twilio
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Finally, create a file named &lt;code&gt;app.py&lt;/code&gt; and add the following code:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from twilio.rest import Client

# client credentials are read from TWILIO_ACCOUNT_SID and AUTH_TOKEN
client = Client()

# this is the Twilio sandbox testing number
from_whatsapp_number=&#39;whatsapp:+14155238886&#39;
# add your own WhatsApp Messaging number here
to_whatsapp_number=&#39;whatsapp:+xxxxxxxxxxx&#39;

client.messages.create(body=&#39;Hello, world!&#39;,
                       from_=from_whatsapp_number,
                       to=to_whatsapp_number)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The above code imports the Twilio Python helper library, instantiates the helper library client, sets a from and to WhatsApp number, and then sends a single message with the &lt;code&gt;client.messages.create()&lt;/code&gt; function call.&lt;/p&gt;
&lt;p&gt;Our Python script is now ready, and we just need to activate the WhatsApp sandbox from the Twilio console to test it out.&lt;/p&gt;
&lt;p&gt;From the WhatsApp &lt;a href=&#34;https://www.twilio.com/console/sms/whatsapp/learn&#34;&gt;page&lt;/a&gt; in the Twilio Console, note the default sandbox number provided by Twilio and the sandbox keyword.
Open WhatsApp on your device, and send &lt;code&gt;join &amp;lt;your sandbox keyword&amp;gt;&lt;/code&gt; to the sandbox number to connect to it. You should receive a reply from the number confirming that you have been connected to the sandbox.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s it! With the virtual environment activated, and the environment variables set, you are now ready to receive messages sent by your app from the sandbox you have connected to.
To disconnect from the sandbox, simply send &lt;code&gt;stop&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In the next part of this story, we will go beyond the basics, and look at the process of actually building a chatbot that would scrape Worldometers for the latest data on Coronavirus, and respond to user queries with accurate results from the website.&lt;/p&gt;
&lt;p&gt;See you in the next one!&lt;/p&gt;
</description>
       </item>
       
     </channel>
   </rss>
